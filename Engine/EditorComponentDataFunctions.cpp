/* THIS FILE IS AUTO-GENERATED BY STEFF-ENGINE. PLEASE DO NOT MODIFY. */

#pragma once
#include "pch.h"

#include "EditorComponentNames.h"
#include "ScriptComponentNamesStruct.h"
#include "ScriptManager.h"

#include "CameraComponent.h"
#include "CharacterControllerComponent.h"
#include "ColliderComponent.h"
#include "InstancedMeshRendererComponent.h"
#include "MeshRendererComponent.h"
#include "RigidBodyComponent.h"
#include "TransformComponent.h"
#include "BoxColliderComponent.h"
#include "CapsuleColliderComponent.h"
#include "PlaneColliderComponent.h"
#include "SphereColliderComponent.h"

using namespace SteffEngine::Core;
using namespace SteffEngine::Editor;

// BEGIN CLASS CameraComponent.h - CameraComponent
std::vector<ExposedVariableData> SteffEngine::Core::Components::CameraComponent::GetEditorData() const
{
	std::vector<ExposedVariableData> data{ 4 };

	data.emplace_back("m_IsActive\0", EditorType::NORMAL, VariableAccessibility(1), VariableType(14785269867199075517), static_cast<const void*>(&m_IsActive));
	data.emplace_back("m_FovDegrees\0", EditorType::NORMAL, VariableAccessibility(1), VariableType(11532138274943533413), static_cast<const void*>(&m_FovDegrees));
	data.emplace_back("m_NearPlane\0", EditorType::NORMAL, VariableAccessibility(1), VariableType(11532138274943533413), static_cast<const void*>(&m_NearPlane));
	data.emplace_back("m_FarPlane\0", EditorType::NORMAL, VariableAccessibility(1), VariableType(11532138274943533413), static_cast<const void*>(&m_FarPlane));

	return data;
}
// END CLASS

// BEGIN CLASS CharacterControllerComponent.h - CharacterControllerComponent
std::vector<ExposedVariableData> SteffEngine::Core::Components::CharacterControllerComponent::GetEditorData() const
{
	std::vector<ExposedVariableData> data{ 9 };

	data.emplace_back("m_Radius\0", EditorType::NORMAL, VariableAccessibility(1), VariableType(11532138274943533413), static_cast<const void*>(&m_Radius));
	data.emplace_back("m_Height\0", EditorType::NORMAL, VariableAccessibility(1), VariableType(11532138274943533413), static_cast<const void*>(&m_Height));
	data.emplace_back("m_SlopeLimit\0", EditorType::NORMAL, VariableAccessibility(1), VariableType(11532138274943533413), static_cast<const void*>(&m_SlopeLimit));
	data.emplace_back("m_StepOffset\0", EditorType::NORMAL, VariableAccessibility(1), VariableType(11532138274943533413), static_cast<const void*>(&m_StepOffset));
	data.emplace_back("m_ContactOffset\0", EditorType::NORMAL, VariableAccessibility(1), VariableType(11532138274943533413), static_cast<const void*>(&m_ContactOffset));
	data.emplace_back("m_Density\0", EditorType::NORMAL, VariableAccessibility(1), VariableType(11532138274943533413), static_cast<const void*>(&m_Density));
	data.emplace_back("m_StaticFriction\0", EditorType::NORMAL, VariableAccessibility(1), VariableType(11532138274943533413), static_cast<const void*>(&m_StaticFriction));
	data.emplace_back("m_DynamicFriction\0", EditorType::NORMAL, VariableAccessibility(1), VariableType(11532138274943533413), static_cast<const void*>(&m_DynamicFriction));
	data.emplace_back("m_Restitution\0", EditorType::NORMAL, VariableAccessibility(1), VariableType(11532138274943533413), static_cast<const void*>(&m_Restitution));

	return data;
}
// END CLASS

// BEGIN CLASS ColliderComponent.h - ColliderComponent
std::vector<ExposedVariableData> SteffEngine::Core::Components::ColliderComponent::GetEditorData() const
{
	std::vector<ExposedVariableData> data{ 4 };

	data.emplace_back("m_IsTrigger\0", EditorType::NORMAL, VariableAccessibility(1), VariableType(14785269867199075517), static_cast<const void*>(&m_IsTrigger));
	data.emplace_back("m_StaticFriction\0", EditorType::NORMAL, VariableAccessibility(1), VariableType(11532138274943533413), static_cast<const void*>(&m_StaticFriction));
	data.emplace_back("m_DynamicFriction\0", EditorType::NORMAL, VariableAccessibility(1), VariableType(11532138274943533413), static_cast<const void*>(&m_DynamicFriction));
	data.emplace_back("m_Restitution\0", EditorType::NORMAL, VariableAccessibility(1), VariableType(11532138274943533413), static_cast<const void*>(&m_Restitution));

	return data;
}
// END CLASS

// BEGIN CLASS InstancedMeshRendererComponent.h - InstancedMeshRendererComponent
std::vector<ExposedVariableData> SteffEngine::Core::Components::InstancedMeshRendererComponent::GetEditorData() const
{
	std::vector<ExposedVariableData> data{ 0 };


	return data;
}
// END CLASS

// BEGIN CLASS MeshRendererComponent.h - MeshRendererComponent
std::vector<ExposedVariableData> SteffEngine::Core::Components::MeshRendererComponent::GetEditorData() const
{
	std::vector<ExposedVariableData> data{ 3 };

	data.emplace_back("m_MeshFilePath\0", EditorType::NORMAL, VariableAccessibility(1), VariableType(6086356466859153974), static_cast<const void*>(&m_MeshFilePath));
	data.emplace_back("m_Shader\0", EditorType::SHADER_FILE, VariableAccessibility(1), VariableType(13451932124814009803), static_cast<const void*>(&m_Shader));
	data.emplace_back("m_IsUsingTransparency\0", EditorType::NORMAL, VariableAccessibility(1), VariableType(14785269867199075517), static_cast<const void*>(&m_IsUsingTransparency));

	return data;
}
// END CLASS

// BEGIN CLASS RigidBodyComponent.h - RigidBodyComponent
std::vector<ExposedVariableData> SteffEngine::Core::Components::RigidBodyComponent::GetEditorData() const
{
	std::vector<ExposedVariableData> data{ 2 };

	data.emplace_back("m_IsStatic\0", EditorType::NORMAL, VariableAccessibility(1), VariableType(14785269867199075517), static_cast<const void*>(&m_IsStatic));
	data.emplace_back("m_Density\0", EditorType::NORMAL, VariableAccessibility(1), VariableType(11532138274943533413), static_cast<const void*>(&m_Density));

	return data;
}
// END CLASS

// BEGIN CLASS TransformComponent.h - TransformComponent
std::vector<ExposedVariableData> SteffEngine::Core::Components::TransformComponent::GetEditorData() const
{
	std::vector<ExposedVariableData> data{ 3 };

	data.emplace_back("m_Position\0", EditorType::NORMAL, VariableAccessibility(1), VariableType(2240813230205538693), static_cast<const void*>(&m_Position));
	data.emplace_back("m_Rotation\0", EditorType::NORMAL, VariableAccessibility(1), VariableType(2240813230205538693), static_cast<const void*>(&m_Rotation));
	data.emplace_back("m_Scale\0", EditorType::NORMAL, VariableAccessibility(1), VariableType(2240813230205538693), static_cast<const void*>(&m_Scale));

	return data;
}
// END CLASS

// BEGIN CLASS BoxColliderComponent.h - BoxColliderComponent
std::vector<ExposedVariableData> SteffEngine::Core::Components::BoxColliderComponent::GetEditorData() const
{
	std::vector<ExposedVariableData> data{ 5 };

	data.emplace_back("m_IsTrigger\0", EditorType::NORMAL, VariableAccessibility(1), VariableType(14785269867199075517), static_cast<const void*>(&m_IsTrigger));
	data.emplace_back("m_StaticFriction\0", EditorType::NORMAL, VariableAccessibility(1), VariableType(11532138274943533413), static_cast<const void*>(&m_StaticFriction));
	data.emplace_back("m_DynamicFriction\0", EditorType::NORMAL, VariableAccessibility(1), VariableType(11532138274943533413), static_cast<const void*>(&m_DynamicFriction));
	data.emplace_back("m_Restitution\0", EditorType::NORMAL, VariableAccessibility(1), VariableType(11532138274943533413), static_cast<const void*>(&m_Restitution));
	data.emplace_back("m_Size\0", EditorType::NORMAL, VariableAccessibility(1), VariableType(2240813230205538693), static_cast<const void*>(&m_Size));

	return data;
}
// END CLASS

// BEGIN CLASS CapsuleColliderComponent.h - CapsuleColliderComponent
std::vector<ExposedVariableData> SteffEngine::Core::Components::CapsuleColliderComponent::GetEditorData() const
{
	std::vector<ExposedVariableData> data{ 6 };

	data.emplace_back("m_IsTrigger\0", EditorType::NORMAL, VariableAccessibility(1), VariableType(14785269867199075517), static_cast<const void*>(&m_IsTrigger));
	data.emplace_back("m_StaticFriction\0", EditorType::NORMAL, VariableAccessibility(1), VariableType(11532138274943533413), static_cast<const void*>(&m_StaticFriction));
	data.emplace_back("m_DynamicFriction\0", EditorType::NORMAL, VariableAccessibility(1), VariableType(11532138274943533413), static_cast<const void*>(&m_DynamicFriction));
	data.emplace_back("m_Restitution\0", EditorType::NORMAL, VariableAccessibility(1), VariableType(11532138274943533413), static_cast<const void*>(&m_Restitution));
	data.emplace_back("m_Radius\0", EditorType::NORMAL, VariableAccessibility(1), VariableType(11532138274943533413), static_cast<const void*>(&m_Radius));
	data.emplace_back("m_Height\0", EditorType::NORMAL, VariableAccessibility(1), VariableType(11532138274943533413), static_cast<const void*>(&m_Height));

	return data;
}
// END CLASS

// BEGIN CLASS PlaneColliderComponent.h - PlaneColliderComponent
std::vector<ExposedVariableData> SteffEngine::Core::Components::PlaneColliderComponent::GetEditorData() const
{
	std::vector<ExposedVariableData> data{ 4 };

	data.emplace_back("m_IsTrigger\0", EditorType::NORMAL, VariableAccessibility(1), VariableType(14785269867199075517), static_cast<const void*>(&m_IsTrigger));
	data.emplace_back("m_StaticFriction\0", EditorType::NORMAL, VariableAccessibility(1), VariableType(11532138274943533413), static_cast<const void*>(&m_StaticFriction));
	data.emplace_back("m_DynamicFriction\0", EditorType::NORMAL, VariableAccessibility(1), VariableType(11532138274943533413), static_cast<const void*>(&m_DynamicFriction));
	data.emplace_back("m_Restitution\0", EditorType::NORMAL, VariableAccessibility(1), VariableType(11532138274943533413), static_cast<const void*>(&m_Restitution));

	return data;
}
// END CLASS

// BEGIN CLASS SphereColliderComponent.h - SphereColliderComponent
std::vector<ExposedVariableData> SteffEngine::Core::Components::SphereColliderComponent::GetEditorData() const
{
	std::vector<ExposedVariableData> data{ 5 };

	data.emplace_back("m_IsTrigger\0", EditorType::NORMAL, VariableAccessibility(1), VariableType(14785269867199075517), static_cast<const void*>(&m_IsTrigger));
	data.emplace_back("m_StaticFriction\0", EditorType::NORMAL, VariableAccessibility(1), VariableType(11532138274943533413), static_cast<const void*>(&m_StaticFriction));
	data.emplace_back("m_DynamicFriction\0", EditorType::NORMAL, VariableAccessibility(1), VariableType(11532138274943533413), static_cast<const void*>(&m_DynamicFriction));
	data.emplace_back("m_Restitution\0", EditorType::NORMAL, VariableAccessibility(1), VariableType(11532138274943533413), static_cast<const void*>(&m_Restitution));
	data.emplace_back("m_Radius\0", EditorType::NORMAL, VariableAccessibility(1), VariableType(11532138274943533413), static_cast<const void*>(&m_Radius));

	return data;
}
// END CLASS

PLUGIN_API
SteffEngine::Core::Components::Component* GameObject::CreateComponent(size_t hash)
{
	if(SteffEngine::Core::Components::CameraComponent::hash == hash) return CreateComponent<SteffEngine::Core::Components::CameraComponent>();
	if(SteffEngine::Core::Components::CharacterControllerComponent::hash == hash) return CreateComponent<SteffEngine::Core::Components::CharacterControllerComponent>();
	if(SteffEngine::Core::Components::InstancedMeshRendererComponent::hash == hash) return CreateComponent<SteffEngine::Core::Components::InstancedMeshRendererComponent>();
	if(SteffEngine::Core::Components::MeshRendererComponent::hash == hash) return CreateComponent<SteffEngine::Core::Components::MeshRendererComponent>();
	if(SteffEngine::Core::Components::RigidBodyComponent::hash == hash) return CreateComponent<SteffEngine::Core::Components::RigidBodyComponent>();
	if(SteffEngine::Core::Components::BoxColliderComponent::hash == hash) return CreateComponent<SteffEngine::Core::Components::BoxColliderComponent>();
	if(SteffEngine::Core::Components::CapsuleColliderComponent::hash == hash) return CreateComponent<SteffEngine::Core::Components::CapsuleColliderComponent>();
	if(SteffEngine::Core::Components::PlaneColliderComponent::hash == hash) return CreateComponent<SteffEngine::Core::Components::PlaneColliderComponent>();
	if(SteffEngine::Core::Components::SphereColliderComponent::hash == hash) return CreateComponent<SteffEngine::Core::Components::SphereColliderComponent>();

	const std::vector<SteffEngine::Core::Components::Component*> returnValues = SteffEngine::Scripting::ScriptManager::GetInstance()->CallFunction<SteffEngine::Core::Components::Component*>("CreateComponent", hash, this);
	for (SteffEngine::Core::Components::Component* pComponent : returnValues)
	{
		if (pComponent != nullptr)
			return pComponent;
	}

	return nullptr;
}

String SteffEngine::Core::Components::Component::GetComponentName() const
{
	if(this->IsSameType<SteffEngine::Core::Components::CameraComponent>()) return SteffEngine::Core::Components::CameraComponent::name;
	if(this->IsSameType<SteffEngine::Core::Components::CharacterControllerComponent>()) return SteffEngine::Core::Components::CharacterControllerComponent::name;
	if(this->IsSameType<SteffEngine::Core::Components::ColliderComponent>()) return SteffEngine::Core::Components::ColliderComponent::name;
	if(this->IsSameType<SteffEngine::Core::Components::InstancedMeshRendererComponent>()) return SteffEngine::Core::Components::InstancedMeshRendererComponent::name;
	if(this->IsSameType<SteffEngine::Core::Components::MeshRendererComponent>()) return SteffEngine::Core::Components::MeshRendererComponent::name;
	if(this->IsSameType<SteffEngine::Core::Components::RigidBodyComponent>()) return SteffEngine::Core::Components::RigidBodyComponent::name;
	if(this->IsSameType<SteffEngine::Core::Components::TransformComponent>()) return SteffEngine::Core::Components::TransformComponent::name;
	if(this->IsSameType<SteffEngine::Core::Components::BoxColliderComponent>()) return SteffEngine::Core::Components::BoxColliderComponent::name;
	if(this->IsSameType<SteffEngine::Core::Components::CapsuleColliderComponent>()) return SteffEngine::Core::Components::CapsuleColliderComponent::name;
	if(this->IsSameType<SteffEngine::Core::Components::PlaneColliderComponent>()) return SteffEngine::Core::Components::PlaneColliderComponent::name;
	if(this->IsSameType<SteffEngine::Core::Components::SphereColliderComponent>()) return SteffEngine::Core::Components::SphereColliderComponent::name;

	const std::vector<String> returnValues = SteffEngine::Scripting::ScriptManager::GetInstance()->CallFunction<String>("GetComponentName", this);
	for (String pComponentName : returnValues)
	{
		if (pComponentName != nullptr)
			return pComponentName;
	}

	return nullptr;
}
